# Unicode

UTF是Unicode Transformation Format的缩写



# 常见字符集

| 字符集 | 是否定长 | 编码方式            | 其他说明                                    |
| ------ | -------- | ------------------- | ------------------------------------------- |
| ACSII  | 是       | 单字节 7 位编码     | 最早的奠基性字符集                          |
| GBK    | 是       | 双字节编码          | 虽然不是国标,但支持的系统不少               |
| UCS-2  | 是       | 2 字节编码          | Windows 2000 内部用 UCS-2                   |
| UTF-32 | 是       | 4 字节编码          | UCS-4 原始编码,目前很少采用                 |
| UTF-16 | 否       | 2 字节或 4 字节编码 | Java 和 Windows XP/NT 等内部使用 UTF-16     |
| UTF-8  | 否       | 1 至 4 字节编码     | 互联网和 UNIX/Linux 广泛支持的 Unicode 字符 |



# 选择合适的字符集

+ 满足应用支持语言的需求

  如果应用要处理各种各样的文字，或者发布到使用不同语言的国家或地区，就应该选择 Unicode 字符集。对 MySQL 来说，目前就是 UTF-8

+ 如果应用中涉及已有数据的导入，就要充分考虑数据库字符集对已有数据的兼容性

+ 如果数据库只需要支持一般中文，数据量很大，性能要求也很高，那就应该选择双字节定长编码的中文字符集，比如 GBK。因为，相对于 UTF-8 而言，GBK 比较小，每个汉字只占 2 个字节，而 UTF-8 汉字编码需要 3 个字节，这样可以减少磁盘I/O、数据库 cache，以及网络传输的时间，从而提高性能。相反，如果应用主要处理英文字符，仅有少量汉字数据，那么选择 UTF-8 更好，因为 GBK、UCS-2、UTF-16 的西文字符编码都是 2 个字节,会造成很大不必要的开销

+ 如果数据库需要做大量的字符运算，如比较、排序等，选择定长字符集可能更好，因为定长字符集的处理速度要比变长字符集的处理速度快

+ 如果所有客户端程序都支持相同的字符集，应该优先选择该字符集作为数据库字符集。这样可以避免因字符集转换带来的性能开销和数据损失



# 字符集

MySQL的字符集包含字符集（character）和校对规则（collation）两个概念。

字符集：用来定义存储字符串的存储方式

校对规则：用来定义比较字符串的方式

字符集和校对规则是一对多的关系，每个字符集至少有一种校对规则

```mysql
# 查看可用字符集
show character set;
# 校对规则
show collation;

# 查看当前数据库字符集和校对规则
show variables like 'character_set_database';
show variables like 'collation_database';

# 查看表的字符集
show create table table_name;
```

校对规则命名约定：以相关的字符集名开始，并且以`_ci`（大小写不敏感）、` _cs`（大小写敏感）、`_bin`（基于字符编码的值）结束。

> 在创建数据库时需要明确指定字符集和校对规则，避免受到默认值影响